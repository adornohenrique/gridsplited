# core/help.py
import streamlit as st

HELP_MD = """
# üìò How this app works

This tool helps you decide **when and how hard to run your plant** (every 15 minutes) to **maximize profit**, not just output.  
It uses your **price file**, **plant constraints**, and **economics**, and can optionally add a **battery** strategy.

---

## üöÄ Quick start (2 minutes)

1. **Upload your price file** (CSV or Excel) in the sidebar.  
   The app detects **timestamp** and **price** automatically.
2. Set **Plant ‚Äî Operations**: Capacity, Min/Max load, Ramp limit, and ‚ÄúAlways on‚Äù.
3. Set **Production & Economics**: MWh/t, MeOH price, CO‚ÇÇ price, CO‚ÇÇ need, and OPEX % (Maintenance, SG&A, Insurance).
4. Choose **Target margin** method:
   - **Power-only (vs BE):** target margin on top of your break-even ‚Ç¨/MWh.
   - **Full-economics:** uses MeOH revenue & variable costs to compute a ‚Ç¨/MWh floor.
5. (Optional) Enable **Battery** and fill its fields (capacity, power, efficiencies, price bands).
6. Click **Run Optimization**.  
   Review the **KPIs**, **tables**, **charts**, and **download** the results.

---

## üì• Inputs (sidebar)

### 1) Operations
- **Plant capacity (MW):** your nameplate or operational cap.
- **Min/Max load (%):** flexibility range (e.g., 10%‚Äì100%).
- **Break-even (‚Ç¨/MWh):** your power cost at zero margin.  
  *Tip:* Enable **Benchmark** below if you want the app to compute a BE from MeOH/CO‚ÇÇ/Water/Margin.
- **Ramp limit (MW/15-min):** max change between consecutive steps.
- **Always on:** if checked, the plant never goes below **Min load**.

### 2) Production & Economics
- **Electricity per ton (MWh/t):** intensity to convert MWh ‚Üí tonnes MeOH.
- **Methanol price (‚Ç¨/t):** revenue per tonne.
- **CO‚ÇÇ price (‚Ç¨/t)** and **CO‚ÇÇ needed (t/t):** variable CO‚ÇÇ cost per tonne.
- **Maintenance / SG&A / Insurance (% of revenue):** variable OPEX adders.

### 3) Optional ‚Äî Benchmark & OPEX
- **Water cost (‚Ç¨/t)** and **Trader margin (% of MeOH revenue):** used by the **Benchmark formula**:  
  \n*(pMeOH ‚àí CO‚ÇÇ_need√ópCO‚ÇÇ ‚àí water ‚àí margin%√ópMeOH) / (MWh/t)*  
- **Use Benchmark as Break-even:** toggles the app to replace your BE with the computed one.

### 4) Target Margin control
- **Margin method:**  
  - **Power-only (vs BE):** price floor = (1 ‚àí target%) √ó Break-even.  
  - **Full-economics:** price floor derived from MeOH revenue minus variable costs.
- **Target margin (%):** your required margin.

### 5) Battery (optional)
- **Energy (MWh), Charge/Discharge power (MW).**
- **Efficiencies** (charge & discharge).
- **SOC limits (0‚Äì1)**: minimum and maximum state of charge as fractions.
- **Charge when price ‚â§** / **Discharge when price ‚â•**: simple price bands.
- **Degradation (‚Ç¨/MWh throughput)**: optional cost per cycled energy.

---

## üß† What the optimizer does

### Step 1 ‚Äî Build a **price floor** (threshold)
From your **Target margin** and chosen **method**, the app computes a price floor (‚Ç¨/MWh).  
**Interpretation:** *Only run more when the market price ‚â• this threshold (and never below break-even).*

### Step 2 ‚Äî Quarter-hour **dispatch**
For each 15-min interval:
- Apply **Min/Max load**, **Ramp limit**, and **Always on**.
- Compare market price vs **threshold**.  
  - If price is high ‚Üí run higher (toward Max load).  
  - If price is low ‚Üí run lower (down to Min or 0, per ‚ÄúAlways on‚Äù).
- Compute **economics per step**:
  - **Power cost** = price √ó energy.
  - **Production (t)** = energy √∑ (MWh/t).
  - **Revenue** = production √ó MeOH price.
  - **CO‚ÇÇ cost** = production √ó CO‚ÇÇ need √ó CO‚ÇÇ price.
  - **Other OPEX** = (Maint + SG&A + Insurance) √ó revenue.
  - **Profit** = revenue ‚àí power ‚àí CO‚ÇÇ ‚àí other OPEX.

### Step 3 ‚Äî Battery (if enabled)
A robust **price-band** strategy runs in parallel:
- **Charge** when price ‚â§ low band; **Discharge** when price ‚â• high band.
- Obeys **power**, **energy**, **efficiency**, and **SOC** limits.
- Battery **profit** = discharge revenue ‚àí charge cost ‚àí degradation.

---

## üìä Reading the results

- **KPIs (project overview):**  
  Energy, weighted avg price, total power cost, total tonnes, revenue, CO‚ÇÇ cost, OPEX, **profit**.
- **Battery KPIs (if enabled):**  
  Profit, energy charged/discharged, degradation cost, average/final SOC.
- **Total project profit** = plant profit **+** battery profit.
- **Tables:** the first 200 rows of dispatch and (if enabled) battery timeline.
- **Charts (if enabled in the app):**
  - Price vs Dispatch (MW)
  - Daily Profit
  - Battery SOC over time
- **Downloads:**  
  - `dispatch_plan.csv` and/or Excel  
  - `battery_schedule.csv` (if battery enabled)

---

## üí° Tips

- **Target margin up ‚Üí run fewer hours** but chase better prices.  
- **Always on** keeps a floor (e.g., 10%) even in low-price periods.  
- If your file isn‚Äôt exactly 15-min data, the app will warn you.
- Use **Scenario Download / Load** (if enabled) to save and share exact inputs.

---

## üõ†Ô∏è Troubleshooting

- **‚ÄúPlease upload a CSV/Excel‚Ä¶‚Äù** ‚Äî Upload a file with **timestamp** and **price** columns.  
  Common names work (e.g., `time`, `datetime`, `lmp`, `‚Ç¨/MWh`).
- **Excel error (‚Äúopenpyxl‚Äù)** ‚Äî Make sure `openpyxl` is in `requirements.txt` and redeploy.
- **Logo not showing** ‚Äî Place `logo.png` in the same folder as `app.py`.
- **Streamlit generic error** ‚Äî Click **Manage app ‚Üí Logs** to see the real traceback.  
  Usual causes: a typo in imports, missing dependency, or wrong Python version.

---

## ‚ùìFAQ

**Q: Power-only vs Full-economics ‚Äî which should I use?**  
**A:** Power-only is simpler and uses your break-even directly. Full-economics is more complete; it converts product revenue & variable costs into a ‚Ç¨/MWh floor using your MWh/t.

**Q: Where do fixed costs (capex, fixed O&M) go?**  
**A:** They‚Äôre not explicitly modeled. You can reflect them by increasing the **Target margin** or adding them into OPEX % if they scale with production.

**Q: Do you model start-up costs or min up/down times?**  
**A:** Not in the basic rule. We limit ramping and min load. For full unit-commitment behavior, ask us about a MILP version.

**Q: Battery bands feel simple ‚Äî can I co-optimize plant + battery?**  
**A:** Yes, a MILP co-optimization can replace the band heuristic. It‚Äôs heavier but yields the best combined schedule.

---

**That‚Äôs it!**  
Upload prices ‚Üí set constraints & economics ‚Üí pick margin method ‚Üí (optional) battery ‚Üí **Run** ‚Üí read KPIs and download the schedules.
"""

def show_help_panel():
    """
    Renders a button that toggles a full help panel.
    """
    if "show_help" not in st.session_state:
        st.session_state.show_help = False

    cols = st.columns([1, 1, 1, 1, 1])
    with cols[-1]:
        if st.button("üìò How this app works", use_container_width=True):
            st.session_state.show_help = not st.session_state.show_help

    if st.session_state.show_help:
        with st.expander("Close help", expanded=True):
            st.markdown(HELP_MD)
